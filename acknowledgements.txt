def showFrame(frame):
    for widget in app.winfo_children():
        widget.pack_forget()
    frame.pack(fill="both", expand=True)

def idk():
    item = wasteItemEntry.get().lower()

    if not item:
        messagebox.showerror("Error", "Enter the waste item first.")
        return

    recyclableKeywords = ["plastic", "bottle", "paper", "cardboard", "can", "glass"]
    reuseableKeywords = ["bag", "container", "box", "cloth", "jar"]
    disposableKeywords = ["wrapper", "tissue", "food", "straw", "napkin", "leftover"]

    suggestedCategory = None

    for word in recyclableKeywords:
        if word in item:
            suggestedCategory = "Recyclable"
            break
    if not suggestedCategory:
        for word in reuseableKeywords:
            if word in item:
                suggestedCategory = "Reuseable"
                break
    if not suggestedCategory:
        for word in disposableKeywords:
            if word in item:
                suggestedCategory = "Disposable"
                break

    if suggestedCategory:
        messagebox.showinfo("Suggestion", f"The item '{item}' might be: {suggestedCategory}")
    else:
        messagebox.showinfo("Suggestion", f"Sorry, we couldn't identify the category for '{item}'. Try asking for help.")


def saveEntry():
    item = wasteItemEntry.get()
    category = categoryMenu.get()
    date = dateEntry.get()

    if not item or not category or not date:
        messagebox.showerror("Error", "Please fill in all fields.")
        return

    try:
        datetime.strptime(date, "%d/%m/%Y")
    except ValueError:
        messagebox.showerror("Date Error", "Use format DD/MM/YYYY.")
        return

    wasteLog.append({"Item": item, "Category": category, "Date": date})
    messagebox.showinfo("Saved", f"Saved entry: {item} ({category}) on {date}")
    wasteItemEntry.delete(0, 'end')
    dateEntry.delete(0, 'end')


def feedback():
    if not wasteLog:
        messagebox.showinfo("Feedback", "No entries yet.")
        return

    counts = {"Recyclable": 0, "Reuseable": 0, "Disposable": 0}
    for entry in wasteLog:
        category = entry["Category"].capitalize()
        if category in counts:
            counts[category] += 1

    summary = "\n".join([f"{k}: {v}" for k, v in counts.items()])
    messagebox.showinfo("Feedback", f"Summary:\n\n{summary}")


def viewLogs():
    pastEntriesTextBox.delete("1.0", "end")
    if not wasteLog:
        pastEntriesTextBox.insert("end", "No past entries yet.")
    else:
        for i, entry in enumerate(wasteLog, start=1):
            pastEntriesTextBox.insert("end", f"{i}. {entry['Item']} ({entry['Category']}) on {entry['Date']}\n")
    showFrame(pastEntriesFrame)


showFrame(loginFrame)


ctk.CTkButton(pastEntriesFrame, text="Back to Waste Log", command=lambda: showFrame(wasteLogFrame)).pack(pady=10)


if os.path.exists("users.json"):
    with open("users.json", "r") as f:
        userAccounts = json.load(f)

if os.path.exists("waste_log.json"):
    with open("waste_log.json", "r") as f:
        wasteLog = json.load(f)

  with open("users.json", "w") as f:
            json.dump(userAccounts, f)